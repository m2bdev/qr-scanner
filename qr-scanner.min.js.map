{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\r\n    /* async */\r\n    static hasCamera() {\r\n        if (!navigator.mediaDevices) return Promise.resolve(false);\r\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\r\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\r\n        // given. That doesn't matter for us though as we don't require labels.\r\n        return navigator.mediaDevices.enumerateDevices()\r\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\r\n            .catch(() => false);\r\n    }\r\n\r\n    /* async */\r\n    static getCameraList() {\r\n        if (!navigator.mediaDevices) return Promise.resolve([]);\r\n\r\n        // note that to enumarate devices and get device labels we need explicit user permission so we ask for that.\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia({ audio: false, video: true })\r\n                .then((stream) => {\r\n                    // hacky approach to close any active stream if they are\r\n                    // active.\r\n                    const closeActiveStreams = (stream) => {\r\n                        const tracks = stream.getVideoTracks();\r\n                        for (let i = 0; i < tracks.length; i += 1) {\r\n                            const track = tracks[i];\r\n                            track.enabled = false;\r\n                            track.stop();\r\n                            stream.removeTrack(track);\r\n                        }\r\n                    };\r\n\r\n                    navigator.mediaDevices.enumerateDevices()\r\n                    .then(devices => {\r\n                        closeActiveStreams(stream);\r\n                        resolve(devices.filter(device => device.kind === 'videoinput').map(device => ({\r\n                            id: device.deviceId,\r\n                            label: device.label\r\n                        })));\r\n                    })\r\n                    .catch((err) => reject(err));\r\n                }).catch((err) => reject(err));\r\n        });\r\n    }\r\n\r\n    constructor(\r\n        video,\r\n        onDecode,\r\n        canvasSizeOrOnDecodeError = this._onDecodeError,\r\n        canvasSizeOrCalculateScanRegion = this._calculateScanRegion,\r\n        preferredFacingMode = 'environment',\r\n        deviceId = null\r\n    ) {\r\n        this.$video = video;\r\n        this.$canvas = document.createElement('canvas');\r\n        this._onDecode = onDecode;\r\n        this._legacyCanvasSize = QrScanner.DEFAULT_CANVAS_SIZE;\r\n        this._preferredFacingMode = preferredFacingMode;\r\n        this._deviceId = deviceId;\r\n        this._active = false;\r\n        this._paused = false;\r\n        this._flashOn = false;\r\n\r\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\r\n            // legacy function signature where the third argument is the canvas size\r\n            this._legacyCanvasSize = canvasSizeOrOnDecodeError;\r\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\r\n                + 'the future');\r\n        } else {\r\n            this._onDecodeError = canvasSizeOrOnDecodeError;\r\n        }\r\n\r\n        if (typeof canvasSizeOrCalculateScanRegion === 'number') {\r\n            // legacy function signature where the fourth argument is the canvas size\r\n            this._legacyCanvasSize = canvasSizeOrCalculateScanRegion;\r\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\r\n                + 'the future');\r\n        } else {\r\n            this._calculateScanRegion = canvasSizeOrCalculateScanRegion;\r\n        }\r\n\r\n        this._scanRegion = this._calculateScanRegion(video);\r\n\r\n        this._onPlay = this._onPlay.bind(this);\r\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\r\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\r\n\r\n        // Allow inline playback on iPhone instead of requiring full screen playback,\r\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\r\n        this.$video.playsInline = true;\r\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\r\n        // includes no audio, but just to be safe.\r\n        this.$video.muted = true;\r\n        this.$video.disablePictureInPicture = true;\r\n        this.$video.addEventListener('play', this._onPlay);\r\n        this.$video.addEventListener('loadedmetadata', this._onLoadedMetaData);\r\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\r\n\r\n        this._qrEnginePromise = QrScanner.createQrEngine();\r\n    }\r\n\r\n    /* async */\r\n    hasFlash() {\r\n        if (!('ImageCapture' in window)) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        const track = this.$video.srcObject ? this.$video.srcObject.getVideoTracks()[0] : null;\r\n        if (!track) {\r\n            return Promise.reject('Camera not started or not available');\r\n        }\r\n\r\n        const imageCapture = new ImageCapture(track);\r\n        return imageCapture.getPhotoCapabilities()\r\n            .then((result) => {\r\n                return result.fillLightMode.includes('flash');\r\n            })\r\n            .catch((error) => {\r\n                console.warn(error);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    isFlashOn() {\r\n      return this._flashOn;\r\n    }\r\n\r\n    /* async */\r\n    toggleFlash() {\r\n      return this._setFlash(!this._flashOn);\r\n    }\r\n\r\n    /* async */\r\n    turnFlashOff() {\r\n      return this._setFlash(false);\r\n    }\r\n\r\n    /* async */\r\n    turnFlashOn() {\r\n      return this._setFlash(true);\r\n    }\r\n\r\n    destroy() {\r\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\r\n        this.$video.removeEventListener('play', this._onPlay);\r\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\r\n\r\n        this.stop();\r\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\r\n    }\r\n\r\n    /* async */\r\n    start() {\r\n        if (this._active && !this._paused) {\r\n            return Promise.resolve();\r\n        }\r\n        if (window.location.protocol !== 'https:') {\r\n            // warn but try starting the camera anyways\r\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\r\n        }\r\n        this._active = true;\r\n        this._paused = false;\r\n        if (document.hidden) {\r\n            // camera will be started as soon as tab is in foreground\r\n            return Promise.resolve();\r\n        }\r\n        clearTimeout(this._offTimeout);\r\n        this._offTimeout = null;\r\n        if (this.$video.srcObject) {\r\n            // camera stream already/still set\r\n            this.$video.play();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        let facingMode = this._preferredFacingMode;\r\n        let deviceId = this._deviceId;\r\n        return this._getCameraStream(facingMode, deviceId, true)\r\n            .catch(() => {\r\n                if (deviceId) {\r\n                    return this._getCameraStream(facingMode, null, true);\r\n                }\r\n                // We (probably) don't have a camera of the requested facing mode\r\n                facingMode = facingMode === 'environment' ? 'user' : 'environment';\r\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\r\n            })\r\n            .then(stream => {\r\n                // Try to determine the facing mode from the stream, otherwise use our guess. Note that the guess is not\r\n                // always accurate as Safari returns cameras of different facing mode, even for exact constraints.\r\n                facingMode = this._getFacingMode(stream) || facingMode;\r\n                this.$video.srcObject = stream;\r\n                this.$video.play();\r\n                this._setVideoMirror(facingMode);\r\n            })\r\n            .catch(e => {\r\n                this._active = false;\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    stop() {\r\n        this.pause();\r\n        this._active = false;\r\n    }\r\n\r\n    pause() {\r\n        this._paused = true;\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n        this.$video.pause();\r\n        if (this._offTimeout) {\r\n            return;\r\n        }\r\n        this._offTimeout = setTimeout(() => {\r\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\r\n            for (const track of tracks) {\r\n                track.stop(); //  note that this will also automatically turn the flashlight off\r\n            }\r\n            this.$video.srcObject = null;\r\n            this._offTimeout = null;\r\n        }, 300);\r\n    }\r\n\r\n    /* async */\r\n    setCamera(deviceId) {\r\n        if (this.$video.srcObject === null) {\r\n            this._deviceId = deviceId;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const active = this._active;\r\n            const paused = this._paused;\r\n\r\n            this._paused = true;\r\n            this.$video.pause();\r\n            this._offTimeout = setTimeout(() => {\r\n                const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\r\n                for (const track of tracks) {\r\n                    track.stop(); //  note that this will also automatically turn the flashlight off\r\n                }\r\n                this.$video.srcObject = null;\r\n                this._offTimeout = null;\r\n                this._deviceId = deviceId;\r\n                if (active) {\r\n                    this.start().then(() => {\r\n                        if (paused) {\r\n                            this.pause();\r\n                        }\r\n                        resolve();\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                    return;\r\n                }\r\n                resolve();\r\n            }, 300);\r\n            this._active = false;\r\n        });\r\n    }\r\n\r\n    /* async */\r\n    static scanImage(imageOrFileOrUrl, scanRegion=null, qrEngine=null, canvas=null, fixedCanvasSize=false,\r\n                     alsoTryWithoutScanRegion=false) {\r\n        const gotExternalWorker = qrEngine instanceof Worker;\r\n\r\n        let promise = Promise.all([\r\n            qrEngine || QrScanner.createQrEngine(),\r\n            QrScanner._loadImage(imageOrFileOrUrl),\r\n        ]).then(([engine, image]) => {\r\n            qrEngine = engine;\r\n            let canvasContext;\r\n            [canvas, canvasContext] = this._drawToCanvas(image, scanRegion, canvas, fixedCanvasSize);\r\n\r\n            if (qrEngine instanceof Worker) {\r\n                if (!gotExternalWorker) {\r\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\r\n                    qrEngine.postMessage({ type: 'inversionMode', data: 'both' });\r\n                }\r\n                return new Promise((resolve, reject) => {\r\n                    let timeout, onMessage, onError;\r\n                    onMessage = event => {\r\n                        if (event.data.type !== 'qrResult') {\r\n                            return;\r\n                        }\r\n                        qrEngine.removeEventListener('message', onMessage);\r\n                        qrEngine.removeEventListener('error', onError);\r\n                        clearTimeout(timeout);\r\n                        if (event.data.data !== null) {\r\n                            resolve(event.data.data);\r\n                        } else {\r\n                            reject(QrScanner.NO_QR_CODE_FOUND);\r\n                        }\r\n                    };\r\n                    onError = (e) => {\r\n                        qrEngine.removeEventListener('message', onMessage);\r\n                        qrEngine.removeEventListener('error', onError);\r\n                        clearTimeout(timeout);\r\n                        const errorMessage = !e ? 'Unknown Error' : (e.message || e);\r\n                        reject('Scanner error: ' + errorMessage);\r\n                    };\r\n                    qrEngine.addEventListener('message', onMessage);\r\n                    qrEngine.addEventListener('error', onError);\r\n                    timeout = setTimeout(() => onError('timeout'), 10000);\r\n                    const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\r\n                    qrEngine.postMessage({\r\n                        type: 'decode',\r\n                        data: imageData\r\n                    }, [imageData.data.buffer]);\r\n                });\r\n            } else {\r\n                return new Promise((resolve, reject) => {\r\n                    const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\r\n                    qrEngine.detect(canvas).then(scanResults => {\r\n                        if (!scanResults.length) {\r\n                            reject(QrScanner.NO_QR_CODE_FOUND);\r\n                        } else {\r\n                            resolve(scanResults[0].rawValue);\r\n                        }\r\n                    }).catch((e) => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\r\n                });\r\n            }\r\n        });\r\n\r\n        if (scanRegion && alsoTryWithoutScanRegion) {\r\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, fixedCanvasSize));\r\n        }\r\n\r\n        promise = promise.finally(() => {\r\n            if (gotExternalWorker) return;\r\n            QrScanner._postWorkerMessage(qrEngine, 'close');\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\r\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\r\n        // well with colored qr codes.\r\n        QrScanner._postWorkerMessage(\r\n            this._qrEnginePromise,\r\n            'grayscaleWeights',\r\n            { red, green, blue, useIntegerApproximation }\r\n        );\r\n    }\r\n\r\n    setInversionMode(inversionMode) {\r\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\r\n        // and inverted qr codes by default\r\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\r\n    }\r\n\r\n    /* async */\r\n    static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\r\n        return ('BarcodeDetector' in window ? BarcodeDetector.getSupportedFormats() : Promise.resolve([]))\r\n            .then((supportedFormats) => supportedFormats.indexOf('qr_code') !== -1\r\n                ? new BarcodeDetector({ formats: ['qr_code'] })\r\n                : new Worker(workerPath)\r\n            );\r\n    }\r\n\r\n    _onPlay() {\r\n        this._scanRegion = this._calculateScanRegion(this.$video);\r\n        this._scanFrame();\r\n    }\r\n\r\n    _onLoadedMetaData() {\r\n        this._scanRegion = this._calculateScanRegion(this.$video);\r\n    }\r\n\r\n    _onVisibilityChange() {\r\n        if (document.hidden) {\r\n            this.pause();\r\n        } else if (this._active) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    _calculateScanRegion(video) {\r\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\r\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\r\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\r\n        return {\r\n            x: (video.videoWidth - scanRegionSize) / 2,\r\n            y: (video.videoHeight - scanRegionSize) / 2,\r\n            width: scanRegionSize,\r\n            height: scanRegionSize,\r\n            downScaledWidth: this._legacyCanvasSize,\r\n            downScaledHeight: this._legacyCanvasSize,\r\n        };\r\n    }\r\n\r\n    _scanFrame() {\r\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\r\n        // using requestAnimationFrame to avoid scanning if tab is in background\r\n        requestAnimationFrame(() => {\r\n            if (this.$video.readyState <= 1) {\r\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\r\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\r\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\r\n                // the canvas until the video is started again and ready.\r\n                this._scanFrame();\r\n                return;\r\n            }\r\n            this._qrEnginePromise\r\n                .then((qrEngine) => QrScanner.scanImage(this.$video, this._scanRegion, qrEngine, this.$canvas))\r\n                .then(this._onDecode, (error) => {\r\n                    if (!this._active) return;\r\n                    const errorMessage = error.message || error;\r\n                    if (errorMessage.indexOf('service unavailable') !== -1) {\r\n                        // When the native BarcodeDetector crashed, create a new one\r\n                        this._qrEnginePromise = QrScanner.createQrEngine();\r\n                    }\r\n                    this._onDecodeError(error);\r\n                })\r\n                .then(() => this._scanFrame());\r\n        });\r\n    }\r\n\r\n    _onDecodeError(error) {\r\n        // default error handler; can be overwritten in the constructor\r\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\r\n        console.log(error);\r\n    }\r\n\r\n    _getCameraStream(facingMode, deviceId, exact = false) {\r\n        const constraintsToTry = [{\r\n            width: { min: 1024 }\r\n        }, {\r\n            width: { min: 768 }\r\n        }, {}];\r\n\r\n        if (deviceId) {\r\n            if (exact) {\r\n                deviceId = { exact: deviceId };\r\n            }\r\n            constraintsToTry.forEach(constraint => constraint.deviceId = deviceId);\r\n        } else if (facingMode) {\r\n            if (exact) {\r\n                facingMode = { exact: facingMode };\r\n            }\r\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\r\n        }\r\n\r\n        return this._getMatchingCameraStream(constraintsToTry);\r\n    }\r\n\r\n    _getMatchingCameraStream(constraintsToTry) {\r\n        if (!navigator.mediaDevices || constraintsToTry.length === 0) {\r\n            return Promise.reject('Camera not found.');\r\n        }\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: constraintsToTry.shift()\r\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\r\n    }\r\n\r\n    /* async */\r\n    _setFlash(on) {\r\n        return this.hasFlash().then((hasFlash) => {\r\n            if (!hasFlash) return Promise.reject('No flash available');\r\n            // Note that the video track is guaranteed to exist at this point\r\n            return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\r\n                advanced: [{ torch: on }],\r\n            });\r\n        }).then(() => this._flashOn = on);\r\n    }\r\n\r\n    _setVideoMirror(facingMode) {\r\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\r\n        const scaleFactor = facingMode==='user'? -1 : 1;\r\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\r\n    }\r\n\r\n    _getFacingMode(videoStream) {\r\n        const videoTrack = videoStream.getVideoTracks()[0];\r\n        if (!videoTrack) return null; // unknown\r\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\r\n        return /rear|back|environment/i.test(videoTrack.label)\r\n            ? 'environment'\r\n            : /front|user|face/i.test(videoTrack.label)\r\n                ? 'user'\r\n                : null; // unknown\r\n    }\r\n\r\n    static _drawToCanvas(image, scanRegion=null, canvas=null, fixedCanvasSize=false) {\r\n        canvas = canvas || document.createElement('canvas');\r\n        const scanRegionX = scanRegion && scanRegion.x? scanRegion.x : 0;\r\n        const scanRegionY = scanRegion && scanRegion.y? scanRegion.y : 0;\r\n        const scanRegionWidth = scanRegion && scanRegion.width? scanRegion.width : image.width || image.videoWidth;\r\n        const scanRegionHeight = scanRegion && scanRegion.height? scanRegion.height : image.height || image.videoHeight;\r\n        if (!fixedCanvasSize) {\r\n            canvas.width = scanRegion && scanRegion.downScaledWidth? scanRegion.downScaledWidth : scanRegionWidth;\r\n            canvas.height = scanRegion && scanRegion.downScaledHeight? scanRegion.downScaledHeight : scanRegionHeight;\r\n        }\r\n        const context = canvas.getContext('2d', { alpha: false });\r\n        context.imageSmoothingEnabled = false; // gives less blurry images\r\n        context.drawImage(\r\n            image,\r\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\r\n            0, 0, canvas.width, canvas.height\r\n        );\r\n        return [canvas, context];\r\n    }\r\n\r\n    /* async */\r\n    static _loadImage(imageOrFileOrBlobOrUrl) {\r\n        if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\r\n            || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap\r\n            || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\r\n            return Promise.resolve(imageOrFileOrBlobOrUrl);\r\n        } else if (imageOrFileOrBlobOrUrl instanceof Image) {\r\n            return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\r\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\r\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof(imageOrFileOrBlobOrUrl)==='string') {\r\n            const image = new Image();\r\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\r\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\r\n            } else {\r\n                image.src = imageOrFileOrBlobOrUrl;\r\n            }\r\n            return QrScanner._awaitImageLoad(image).then(() => {\r\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\r\n                    URL.revokeObjectURL(image.src);\r\n                }\r\n                return image;\r\n            });\r\n        } else {\r\n            return Promise.reject('Unsupported image type.');\r\n        }\r\n    }\r\n\r\n    /* async */\r\n    static _awaitImageLoad(image) {\r\n        return new Promise((resolve, reject) => {\r\n            if (image.complete && image.naturalWidth!==0) {\r\n                // already loaded\r\n                resolve();\r\n            } else {\r\n                let onLoad, onError;\r\n                onLoad = () => {\r\n                    image.removeEventListener('load', onLoad);\r\n                    image.removeEventListener('error', onError);\r\n                    resolve();\r\n                };\r\n                onError = () => {\r\n                    image.removeEventListener('load', onLoad);\r\n                    image.removeEventListener('error', onError);\r\n                    reject('Image load error');\r\n                };\r\n                image.addEventListener('load', onLoad);\r\n                image.addEventListener('error', onError);\r\n            }\r\n        });\r\n    }\r\n\r\n    /* async */\r\n    static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\r\n        return Promise.resolve(qrEngineOrQrEnginePromise).then((qrEngine) => {\r\n            if (!(qrEngine instanceof Worker)) return;\r\n            qrEngine.postMessage({ type, data });\r\n        });\r\n    }\r\n}\r\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\r\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\r\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\r\n"],"names":["QrScanner","navigator","mediaDevices","enumerateDevices","then","devices","some","device","kind","catch","Promise","resolve","reject","getUserMedia","audio","video","stream","tracks","getVideoTracks","i","length","track","enabled","stop","removeTrack","closeActiveStreams","filter","map","id","deviceId","label","err","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","canvasSizeOrCalculateScanRegion","_calculateScanRegion","preferredFacingMode","$video","$canvas","document","createElement","_onDecode","_legacyCanvasSize","DEFAULT_CANVAS_SIZE","_preferredFacingMode","_deviceId","_flashOn","_paused","_active","console","warn","_scanRegion","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","playsInline","muted","disablePictureInPicture","addEventListener","_qrEnginePromise","createQrEngine","window","getPhotoCapabilities","result","fillLightMode","includes","error","_setFlash","removeEventListener","_postWorkerMessage","location","protocol","hidden","clearTimeout","_offTimeout","srcObject","play","facingMode","_getCameraStream","_getFacingMode","_setVideoMirror","e","pause","setTimeout","active","start","paused","imageOrFileOrUrl","scanRegion","qrEngine","canvas","fixedCanvasSize","alsoTryWithoutScanRegion","promise","all","_loadImage","engine","image","canvasContext","_drawToCanvas","Worker","gotExternalWorker","postMessage","type","data","timeout","onMessage","onError","event","NO_QR_CODE_FOUND","width","height","imageData","buffer","detect","scanResults","rawValue","message","finally","scanImage","red","green","blue","useIntegerApproximation","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","supportedFormats","indexOf","formats","_scanFrame","videoHeight","x","videoWidth","scanRegionSize","y","downScaledWidth","downScaledHeight","ended","requestAnimationFrame","readyState","log","exact","min","constraintsToTry","forEach","constraint","_getMatchingCameraStream","shift","on","hasFlash","applyConstraints","advanced","torch","style","transform","videoStream","test","videoTrack","scanRegionWidth","scanRegionHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","imageOrFileOrBlobOrUrl","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","Blob","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad","qrEngineOrQrEnginePromise"],"mappings":"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"}